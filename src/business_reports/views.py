import csv
import subprocess

from django.shortcuts import render, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.template import RequestContext, loader
from django.http import HttpResponse
from django.conf import settings

from models import Report

import sys
reload(sys)
sys.setdefaultencoding('utf-8')

def index(request):
    """For now show a simple page listing all reports.  
    Later it could be customizable, different for users, respect permissions,
    etc."""
    all_reports = Report.objects.all()

    #Footer:
    footer_html = getattr(settings,'MR_REPORTS_FOOTER_HTML',
        "<p><em>Generated by <a href=''>Business Reports</a>.</em></p>")

    return render(request, 'business_reports/report_listing.html', locals())

def data_to_csv(response, datasets):
    w=csv.writer(response,dialect='excel')
    for i,(dataset,data,columns) in enumerate(datasets):
        if i>0:
            #a row of padding between data sets
            w.writerows([['' for col in columns]])
        w.writerows([[s.encode("utf-8") for s in columns]])
        w.writerows(data)
    return response

def output_pdf(request, context_from_view, report):
    """Return a PDF version of report.  This is really required to be run from the 
    render_report function since it depends on all of its context.

    Requires server to be running at settings.BASE_PATH in order to server static files.
    """
    if not getattr(settings, 'MR_REPORTS_WKHTMLTOPDF_PATH','') and getattr(settings, 'BASE_PATH',''):
        return HttpResponse("PDF generation not available. Please add and set 'MR_REPORTS_WKHTMLTOPDF_PATH', and 'BASE_PATH' in your settings.py file.")
    #Render normal page HTML, and feed it to WKHTMLTOPDF
    command = [getattr(settings, 'MR_REPORTS_WKHTMLTOPDF_PATH')]
    command += getattr(settings, 'MR_REPORTS_WKHTMLTOPDF_OPTIONS',[])
    command += ['--page-size', report.pdf_paper_size, '--orientation', report.pdf_orientation]
    command += ["-","-"] #"-" to tell WKHTMLTOPDF to use pipes for input and output
    #print ' '.join(command)
    wkhtml2pdf = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    template = loader.get_template('business_reports/report.html')
    html = template.render(context_from_view).encode('utf8')
    wkdata = wkhtml2pdf.communicate(html)
    pdf = wkdata[0];
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = 'attachment; filename=%s.pdf' % report.filename()
    response.write(pdf)
    return response

def render_report(request, report_id, format=''):
    report = get_object_or_404(Report, pk=report_id)

    curr_url = request.get_full_path()
    base_path = ''
    datasets = []

    #render report
    parameter_form = None
    datasets = report.get_all_data(parameter_form)
    #Include links to PDF and CSV versions of report
    csv_url = curr_url + 'csv/'
    pdf_url = curr_url + 'pdf/'

    #Handle alternative outputs
    if format=='csv':
        #assert datasets and not prompt_for_parameters
        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'] = 'attachment; filename="%s.csv"' % report.filename()
        response = data_to_csv(response,datasets)
        return response
    elif format=='pdf':
        #assert datasets and not prompt_for_parameters
        base_path = settings.BASE_PATH.rstrip('/')
        context = RequestContext(request, locals())
        return output_pdf(request, context, report)
    else:
        #normal page render
        return render(request, 'business_reports/report.html', locals())

@login_required
def report(request, report_id, format=''):
    """Render a report for the web"""
    return render_report(request, report_id, format)

